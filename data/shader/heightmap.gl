#version 150

uniform vec3 eye;
in vec3 fragmentColor;
in vec3 fragmentNormal;
in vec3 fragmentPosition;
out vec4 outColor;
// void main()
// {
// 	vec3 normals = fragmentColor/2+0.5;
// 	float distance = length(eye-fragmentPosition);
// 	vec3 col = mix(normals, vec3(0x1e/255.0,0x21/255.0,0x55/255.0), clamp(distance/128,0,1));
// 	outColor = vec4(col,1);
// }

void main()
{
	vec3 normals = fragmentColor;
	float height = fragmentPosition.z/55.0;

	vec3 ambient = vec3(0.1,0.1,0.2);
	vec3 sun_dir = normalize(vec3(-0.7,0.1,1.0));
	vec3 diffuse = vec3(0.6,0.6,1.0)*max(dot(normals, sun_dir), 0);
	vec3 v = normalize(eye-fragmentPosition);
	vec3 h = normalize(v+sun_dir);
	vec3 specular = vec3(1.0,0.4,0.4)*pow(max(dot(normals, h),0), 10);

	vec3 material = vec3(0.01,0.01,0.2);
	material = mix(material, vec3(0.2,0.05,0.1), smoothstep(0.0,0.3,height));
	material = mix(material, vec3(0.8,0.8,0.8), smoothstep(0.5,0.6,height));
	vec3 light = ambient+diffuse+specular;
	float distance = length(eye-fragmentPosition);
	vec3 col = pow( vec3(material*light), vec3(1.0/2.2) );
	col = mix(col, vec3(0x1e/255.0,0x21/255.0,0x55/255.0), clamp(distance/128,0,1));
	outColor = vec4(col, 1.0);
}
